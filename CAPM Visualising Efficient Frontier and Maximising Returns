pip install alpha_vantage

import numpy as np
import matplotlib.pyplot as plt
from numpy import random
import pandas as pd
from pandas.core.frame import DataFrame
import requests
from alpha_vantage.timeseries import TimeSeries
import math
from sklearn.preprocessing import normalize
API_key = your_API_key
ts = TimeSeries(key = API_key, output_format='pandas')
iei_annual_coupon_payment = 3.4 #as of 1/8/24, update every month as I can't find a way to generate real-time data
intraday = ts.get_intraday(symbol='IEI', interval='1min', outputsize='compact')
intraday_data = intraday[0]
intraday_close = intraday_data['4. close']
current_iei_price = intraday_close.iloc[0]
iei_current_yield = 100*(iei_annual_coupon_payment/current_iei_price)
def create_returns_list(symbol_array):
    symbol_array.append('IEI')
    symbol_array.append('SPY')
    returns_array = []
    min_length = math.inf
    for i in range(len(symbol_array)):
        monthly_adjusted = ts.get_monthly_adjusted(symbol_array[i])
        data = monthly_adjusted[0]
        monthly_adjusted_close = data['5. adjusted close']
        if (len(monthly_adjusted_close) < min_length):
            min_length = len(monthly_adjusted_close)
    for i in range(len(symbol_array)):
        monthly_adjusted = ts.get_monthly_adjusted(symbol_array[i])
        data = monthly_adjusted[0]
        monthly_adjusted_close = data['5. adjusted close']
        returns = []
        correct_length_array = []
        for j in range(len(monthly_adjusted_close) - min_length, len(monthly_adjusted_close)):
            correct_length_array.append(monthly_adjusted_close.iloc[j])
        for k in range(0, ((len(correct_length_array)-1)//12)):
            returns.append(100*(correct_length_array[12*(k+1)] - correct_length_array[12*(k)])/correct_length_array[12*(k)])
        returns_array.append(returns)
    return returns_array    

def covariance_returns_x_y(returns_x, returns_y):
    n = len(returns_x)
    if len(returns_y) == n:
        mean_xy = 0
        u = np.cov(returns_x,returns_y)
        return u[0][1]
    else:
        raise ValueError("Dimensions are unequal")

def betas(returns_list):
    beta_list = []
    var = covariance_returns_x_y(returns_list[-1], returns_list[-1])
    for i in range(len(returns_list) - 2):
        beta = covariance_returns_x_y(returns_list[i], returns_list[-1])/var
        beta_list.append(beta)
    return beta_list

def beta_portfolio(betas, weights):
    if ((len(betas)) == len(weights) and np.isclose(np.sum(weights), 1)):
        beta = 0
        for i in range(0, len(betas)):
            beta += weights[i]*betas[i]
        return beta
    else:
        raise ValueError("Dimensions are unequal or weights don't sum to 1")
        
def expecteds_return(returns_list):
    expecteds = []
    beta = betas(returns_list)
    returns_market = returns_list[-1]
    returns_bond = returns_list[-2]
    mean_excess_return = 0
    n = len(returns_market)
    for i in range(n):
        mean_excess_return += (returns_market[i] - returns_bond[i])/n
    for j in range(len(returns_list) -2):
        expecteds.append(beta[j]*mean_excess_return + iei_current_yield)
    return expecteds

def expected_return_portfolio(expecteds_return, weights):
    if ((len(expecteds_return)) == len(weights) and np.isclose(np.sum(weights), 1)):
        expected = 0
        for i in range(0, len(expecteds_return)):
            expected += weights[i]*expecteds_return[i]
        return expected
    else:
        raise ValueError("Dimensions are unequal or weights don't sum to 1")    
    
def covariance_returns_matrix(individual_returns):
    n = len(individual_returns)
    m = np.zeros((n,n))
    for i in range(n):
        for j in range(n):
            m[i,j] = covariance_returns_x_y(individual_returns[i], individual_returns[j])
    return m

def risk_portfolio(covariance_returns_matrix, weights):
    dim = np.shape(covariance_returns_matrix)
    m = dim[0]
    n = dim[1]
    q = len(weights)
    if (m == n and n == q and np.isclose(np.sum(weights), 1)):
        covariance = 0
        for i in range(m):
            for j in range(n):
                           covariance = covariance + weights[i]*weights[j]*(covariance_returns_matrix[i][j])
        return covariance**0.5
    else:
        raise ValueError("Dimensions are unequal or weights don't sum to 1")
        
def draw_mpt_graph(returns):
    covariance_returns_matrix_plus_iei_spy = covariance_returns_matrix(returns)
    matrix = covariance_returns_matrix_plus_iei_spy[0:-2,0:-2]
    array= expecteds_return(returns)
    x = []
    y = []
    for i in range(100000):
        sum = 0
        n = len(array)
        if (n == 1):
            weights_array_i = [1]
        else:
            w = []
            for j in range(n):
                weight = random.rand()
                w.append(weight)
            weights = np.array(w)
            n = len(weights)
            w_normal = normalize(weights.reshape(1,n), norm='l1')
            weights_array_i = w_normal.flatten()
        risk = risk_portfolio(matrix, weights_array_i)
        x.append(risk)
        y.append(expected_return_portfolio(array, weights_array_i))
    plt.plot(x,y, "bo", label='Efficient Frontier')
    plt.ylabel('Expected Return')
    plt.xlabel('Risk (Standard Deviation)')
    plt.title('Mean-Variance Optimisation (Efficient Frontier)')
    plt.legend()
    plt.grid(True)
    plt.show()
    
def maximising_return_weights(expecteds_return):
    expected_positive_returns = []
    for i in range(len(expecteds_return)):
        if (expecteds_return[i] > 0):
            expected_positive_returns.append(expecteds_return[i])
        else:
            expected_positive_returns.append(0)
    if np.sum(expected_positive_returns) == 0:
        return expected_positive_returns
    return expected_positive_returns/np.sum(expected_positive_returns)
returns = create_returns_list(['AAPL', 'MSFT', 'AMZN', 'TSLA', 'GOOGL', 'GOOG'])
draw_mpt_graph(returns)
print(maximising_return_weights(expecteds_return(returns)))

pip install alpha_vantage

import numpy as np
import matplotlib.pyplot as plt
from numpy import random
import pandas as pd
from pandas.core.frame import DataFrame
import requests
from alpha_vantage.timeseries import TimeSeries
import math
API_key = 'TSX9611IFPXD1536'
ts = TimeSeries(key = API_key, output_format='pandas')

def create_returns_list(symbol_array):
    returns_array = []
    min_length = math. inf
    for i in range(len(symbol_array)):
        monthly_adjusted = ts.get_monthly_adjusted(symbol_array[i])
        data = monthly_adjusted[0]
        monthly_adjusted_close = data['5. adjusted close']
        if (len(monthly_adjusted_close) < min_length):
            min_length = len(monthly_adjusted_close)
    for i in range(len(symbol_array)):
        monthly_adjusted = ts.get_monthly_adjusted(symbol_array[i])
        data = monthly_adjusted[0]
        monthly_adjusted_close = data['5. adjusted close']
        returns = []
        correct_length_array = []
        for j in range(len(monthly_adjusted_close) - min_length, len(monthly_adjusted_close)):
            correct_length_array.append(monthly_adjusted_close.iloc[j])
        for k in range(0, ((len(correct_length_array)-1)//12)):
            returns.append(100*(correct_length_array[12*(k+1)] - correct_length_array[12*(k)])/correct_length_array[12*(k)])
        returns_array.append(returns)
    return returns_array    

def mean_returns(returns_array):
    means = []
    for i in range(len(returns_array)):
        means.append(np.mean(returns_array[i]))
    return means
    
def expected_return_portfolio(mean_returns, weights):
    if (len(mean_returns) == len(weights) and np.isclose(np.sum(weights), 1)):
        u= np.vdot(mean_returns, weights)
        return u 
    else:
        raise ValueError("Dimensions are unequal or weights don't sum to 1")

def covariance_returns_x_y(returns_x, returns_y):
    n = len(returns_x)
    if len(returns_y) == n:
        mean_xy = 0
        u = np.cov(returns_x,returns_y)
        return u[0][1]
    else:
        raise ValueError("Dimensions are unequal")
    
def covariance_returns_matrix(returns_array):
    n = len(individual_returns)
    covariance_returns_matrix = np.zeros((n,n))
    for i in range(n):
        for j in range(n):
            covariance_returns_matrix[i,j] = covariance_returns_x_y(individual_returns[i], individual_returns[j])
    return covariance_returns_matrix

def risk_portfolio(covariance_returns_matrix, weights):
    dim = np.shape(covariance_returns_matrix)
    m = dim[0]
    n = dim[1]
    q = len(weights)
    if (m == n and n == q and np.isclose(np.sum(weights), 1)):
        covariance = 0
        for i in range(m):
            for j in range(n):
                           covariance = covariance + weights[i]*weights[j]*(covariance_returns_matrix[i][j])
        return covariance**0.5
    else:
        raise ValueError("Dimensions are unequal or weights don't sum to 1")
        
def draw_mpt_graph(expecteds_return_portfolio, risks_portfolio):
    if len(expecteds_return_portfolio) == len(risks_portfolio):
        x = expecteds_return_portfolio
        y = risks_portfolio
        plt.plot(x,y, "bo", label='Efficient Frontier')
        plt.xlabel('Expected Return')
        plt.ylabel('Risk (Standard Deviation)')
        plt.title('Mean-Variance Optimisation (Efficient Frontier)')
        plt.legend()
        plt.grid(True)
        plt.show()
    else:
        print("dimensions are unequal")

def maximising_return_weights(mean_returns):
    mean_positive_returns = []
    for i in range(len(mean_returns)):
        if (mean_returns[i] > 0):
            mean_positive_returns.append(mean_returns[i])
        else:
            mean_positive_returns.append(0)
    if np.sum(mean_positive_returns) == 0:
        return mean_positive_returns
    return mean_positive_returns/np.sum(mean_positive_returns)

individual_returns = create_returns_list(['AAPL', 'MSFT', 'AMZN', 'TSLA', 'GOOGL', 'GOOG']) 
mean_individual_returns = mean_returns(individual_returns)
covariance_returns_matrix = covariance_returns_matrix(individual_returns)
expecteds_return_portfolio = []
risks_portfolio = []
for i in range(1000):
    weights_array_i = []
    sum = 0
    for j in range(5):
        weight = random.rand()
        weights_array_i.append(weight)
        sum += weight
    weights_array_i.append(1 - sum)
    expected_return = expected_return_portfolio(mean_individual_returns, weights_array_i)
    risk = risk_portfolio(covariance_returns_matrix, weights_array_i)
    expecteds_return_portfolio.append(expected_return)
    risks_portfolio.append(risk)
draw_mpt_graph(expecteds_return_portfolio, risks_portfolio)
print(maximising_return_weights(mean_individual_returns))
